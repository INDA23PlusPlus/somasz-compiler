<translation_unit> ::= <function> | <function> <translation_unit>

<function> ::= "fn" <idnetifier> "(" <argument>* ")" <block_statemant>

<block_statemant> ::= "{" <statement_list> "}"  | "{" "}"

<statement_list> ::= <statement> | <statement> <statement_list>

<statement> ::= <decalration> | <if_statemnt> | <return> 

<return> ::= "return"  <epxression> ";"

<if_statemnt> ::= "if"  <epxression>  <block_statemant> | "if" <epxression> <block_statemant>  "else" <block_statemant>

<primary_exp> ::= <idnetifier> | <integer> | "(" <epxression> ")"

<unary_op> ::= "!" | "~"

<func_call> ::= <idnetifier> "(" <argument>* ")"  

<unary_exp> ::= <unary_op>? <func_call> | <primary_exp>

<mult_exp> ::= <unary_exp> | <mult_exp> "*" <unary_exp> | <mult_exp> "/" <unary_exp> | <mult_exp> "%" <unary_exp>

<add_exp> ::= <mult_exp> | <add_exp> "+" <mult_exp> | <add_exp> "-" <mult_exp>

<comp_exp> ::= <add_exp> | <comp_exp> ">" <add_exp> | <comp_exp> ">=" <add_exp> | <comp_exp> "<" <add_exp> | <comp_exp> "<=" <add_exp> 

<relaion_exp> ::= <comp_exp> | <relaion_exp> "==" <comp_exp> | <relaion_exp> "!=" <comp_exp>

<bitw_and> ::= <relaion_exp> | <bitw_and> "&" <relaion_exp>

<bitw_xor> ::= <bitw_and> | <bitw_xor> "^" <bitw_and>

<bitw_or> ::= <bitw_xor> | <bitw_or> "|" <bitw_xor>

<log_and> ::= <bitw_or> | <log_and> "&&" <bitw_or>

<log_or> ::= <log_and> | <log_or> "||" <log_and>

<epxression> ::= <log_or>


<decalration> ::= "let"  <idnetifier>  <assignment_operator>  <integer> ";" 

<argument> ::= <idnetifier>  ","  <argument> | <idnetifier>

<idnetifier> ::= ( [a-z] | [A-Z] ) ( [a-z] | [A-Z] | "_" | [0-9])+ | ( [a-z] | [A-Z] )

<assignment_operator> ::= "=" 

<integer> ::= [0-9]+